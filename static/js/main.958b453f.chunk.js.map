{"version":3,"sources":["Scanner.js","Result.js","App.js","serviceWorker.js","index.js"],"names":["Scanner","props","Quagga","offDetected","this","_onDetected","result","onDetected","id","className","init","inputStream","type","constraints","width","height","facing","locator","patchSize","halfSample","numOfWorkers","decoder","readers","locate","err","console","log","start","React","Component","Result","codeResult","code","format","App","state","scanning","results","setState","concat","onClick","_scan","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6NAwDeA,E,kDAnDX,WAAYC,GAAQ,uCACVA,G,mEAGVC,IAAOC,YAAYC,KAAKC,e,kCAGdC,GACVF,KAAKH,MAAMM,WAAWD,K,+BAGtB,OAAO,yBAAKE,GAAG,cAAcC,UAAU,e,0CAEpB,IAAD,OAClBP,IAAOQ,KACL,CACEC,YAAa,CACXC,KAAM,aACNC,YAAa,CACXC,MAAO,IACPC,OAAQ,IACRC,OAAQ,gBAGZC,QAAS,CACPC,UAAW,SACXC,YAAY,GAEdC,aAAc,EACdC,QAAS,CACPC,QAAS,CAAC,oBAEZC,QAAQ,IAEV,SAAUC,GACR,GAAIA,EACF,OAAOC,QAAQC,IAAIF,GAErBtB,IAAOyB,WAGXzB,IAAOK,YAAW,SAACD,GAAU,EAAKD,YAAYC,U,GA1C5BsB,IAAMC,WCkBbC,E,kDAnBX,WAAY7B,GAAO,uCACTA,G,qDAGN,IAAMK,EAASF,KAAKH,MAAMK,OAE1B,OAAKA,EAID,4BACCA,EAAOyB,WAAWC,KADnB,KAC2B1B,EAAOyB,WAAWE,OAD7C,KAHO,S,GAREL,IAAMC,WCkCZK,E,kDAhCb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IACDkC,MAAQ,CACXC,UAAU,EACVC,QAAS,IAJM,E,oDAQjBZ,QAAQC,IAAItB,MACZA,KAAKkC,SAAS,CAAEF,UAAWhC,KAAK+B,MAAMC,a,kCAG5B9B,GAEVF,KAAKkC,SAAS,CAAED,QAASjC,KAAK+B,MAAME,QAAQE,OAAO,CAACjC,Q,+BAE5C,IAAD,OACP,OACE,6BACE,4BAAQkC,QAAS,WAAK,EAAKC,UACxBrC,KAAK+B,MAAMC,SAAW,OAAS,SAElC,wBAAI3B,UAAU,WACXL,KAAK+B,MAAME,QAAQK,KAAI,SAACpC,GAAD,OACtB,kBAAC,EAAD,CAAQqC,IAAKrC,EAAOyB,WAAWC,KAAM1B,OAAQA,QAGhDF,KAAK+B,MAAMC,SAAW,kBAAC,EAAD,CAAS7B,WAAY,SAACD,GAAU,EAAKD,YAAYC,MAAe,U,GA5B7EsB,IAAMC,WCSJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.958b453f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Quagga from \"quagga\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Scanner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n  componentWillUnmount() {\r\n    Quagga.offDetected(this._onDetected);\r\n  }\r\n\r\n  _onDetected(result) {\r\n    this.props.onDetected(result);\r\n  }\r\n  render() {\r\n    return <div id=\"interactive\" className=\"viewport\" />;\r\n  }\r\n  componentDidMount() {\r\n    Quagga.init(\r\n      {\r\n        inputStream: {\r\n          type: \"LiveStream\",\r\n          constraints: {\r\n            width: 640,\r\n            height: 480,\r\n            facing: \"environment\", // or user\r\n          },\r\n        },\r\n        locator: {\r\n          patchSize: \"medium\",\r\n          halfSample: true,\r\n        },\r\n        numOfWorkers: 2,\r\n        decoder: {\r\n          readers: [\"code_128_reader\"],\r\n        },\r\n        locate: true,\r\n      },\r\n      function (err) {\r\n        if (err) {\r\n          return console.log(err);\r\n        }\r\n        Quagga.start();\r\n      }\r\n    );\r\n    Quagga.onDetected((result)=>{this._onDetected(result)});\r\n  }\r\n\r\n\r\n}\r\n\r\nScanner.propTypes = {\r\n  onDetected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Scanner;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nclass Result extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        const result = this.props.result;\r\n\r\n        if (!result) {\r\n            return null;\r\n        }\r\n        return (\r\n            <li>\r\n            {result.codeResult.code} [{result.codeResult.format}]\r\n            </li>\r\n        );\r\n    }\r\n}\r\nResult.propTypes={\r\n    result: PropTypes.object\r\n}\r\nexport default Result;","import React from \"react\";\nimport Scanner from \"./Scanner\";\nimport Result from \"./Result\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scanning: false,\n      results: [],\n    };\n  }\n  _scan() {\n    console.log(this);\n    this.setState({ scanning: !this.state.scanning });\n  }\n\n  _onDetected(result) {\n    debugger\n    this.setState({ results: this.state.results.concat([result]) });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={()=>{this._scan()}}>\n          {this.state.scanning ? \"Stop\" : \"Start\"}\n        </button>\n        <ul className=\"results\">\n          {this.state.results.map((result) => (\n            <Result key={result.codeResult.code} result={result} />\n          ))}\n        </ul>\n        {this.state.scanning ? <Scanner onDetected={(result)=>{this._onDetected(result)}} /> : null}\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}